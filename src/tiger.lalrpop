/// program ::=
/// exp
/// | decs
///
/// exp ::=
/// # Literals.
/// nil
/// | integer
/// | string
///
/// # Array and record creations.
/// | type-id [ exp ] of exp
/// | type-id {[ id = exp { , id = exp } ] }
///
/// # Object creation.
/// | new type-id
///
/// # Variables, field, elements of an array.
/// | lvalue
///
/// # Function call.
/// | id ( [ exp { , exp }] )
///
/// # Method call.
/// | lvalue . id ( [ exp { , exp }] )
///
/// # Operations.
/// | - exp
/// | exp op exp
/// | ( exps )
///
/// # Assignment.
/// | lvalue := exp
///
/// # Control structures.
/// | if exp then exp [else exp]
/// | while exp do exp
/// | for id := exp to exp do exp
/// | break
/// | let decs in exps end
///
/// lvalue ::= id
/// | lvalue . id
/// | lvalue [ exp ]
/// exps ::= [ exp { ; exp } ]
///
/// decs ::= { dec }
/// dec ::=
/// # Type declaration.
/// type id = ty
/// # Class definition (alternative form).
/// | class id [ extends type-id ] { classfields }
/// # Variable declaration.
/// | vardec
/// # Function declaration.
/// | function id ( tyfields ) [ : type-id ] = exp
/// # Primitive declaration.
/// | primitive id ( tyfields ) [ : type-id ]
/// # Importing a set of declarations.
/// | import string
///
/// vardec ::= var id [ : type-id ] := exp
///
/// classfields ::= { classfield }
/// # Class fields.
/// classfield ::=
/// # Attribute declaration.
/// vardec
/// # Method declaration.
/// | method id ( tyfields ) [ : type-id ] = exp
///
/// # Types.
/// ty ::=
/// # Type alias.
/// type-id
/// # Record type definition.
/// | { tyfields  }
/// # Array type definition.
/// | array of type-id
/// # Class definition (canonical form).
/// | class [ extends type-id ] { classfields }
/// tyfields ::= [ id : type-id { , id : type-id } ]
/// type-id ::= id
///
/// op ::= + | - | * | / | = | <> | > | < | >= | <= | & | |

use ast::Exp::*;
use ast::Var::*;
use ast::Ty::*;
use ast::{Position, Symbol, Var, Exp, FunDecl, TypeDecl, Dec, Field, Ty, Oper};
use lexer::Token;
use symbol::SymbolId;

grammar;

extern {
    type Location = usize;
    enum Token {

"(" => Token::LParen,
")" => Token::RParen,
"[" => Token::LBracket,
"]" => Token::RBracket,
"{" => Token::LBrace,
"}" => Token::RBrace,

"," => Token::Comma,
";" => Token::SemiColon,
":" => Token::Colon,

"." => Token::Dot,
"+" => Token::Plus,
"-" => Token::Minus,
"*" => Token::Star,
"/" => Token::Slash,
"=" => Token::Equal,
"<>" => Token::NotEqual,
"<" => Token::Lower,
"<=" => Token::LowerEqual,
">" => Token::Greater,
">=" => Token::GreaterEqual,
"&" => Token::Ampersand,
"|" => Token::Pipe,
":=" => Token::Assign,

"nil" => Token::Nil,
"of" => Token::Of,
"while" => Token::While,
"for" => Token::For,
"to" => Token::To,
"break" => Token::Break,
"let" => Token::Let,
"in" => Token::In,
"end" => Token::End,
"function" => Token::Function,
"var" => Token::Var,
"type" => Token::Type,
"array" => Token::Array,
"if" => Token::If,
"then" => Token::Then,
"else" => Token::Else,
"new" => Token::New,
"do" => Token::Do,

Integer => Token::Integer(<i32>),
Ident => Token::Ident(<SymbolId>),
String => Token::String(<String>),

    }
}

Comma<T, S>: Vec<T> = { // (0)
    <v:(<T> S)*> <e:T?> => match e { // (1)
        None=> v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

pub Program: Box<Exp> = {
   Exp,
};

Exps = Comma<Exp, ";">;
Args = Comma<Exp, ",">;

Exp: Box<Exp> = {
   IfExp,
};

IfExp: Box<Exp> = {
   MatchedExp,
   UnmatchedExp,
};

MatchedExp: Box<Exp> = {
    <pos:@L> "if" <e1:Exp> "then" <e2:MatchedExp> "else" <e3:MatchedExp> =>
      Box::new(IfExp { test: e1, then_: e2, else_: Some(e3), pos: pos}),
    LoopExp,
};

UnmatchedExp: Box<Exp> = {
   <pos:@L> "if" <e1:Exp> "then" <e2:UnmatchedExp> =>
      Box::new(IfExp { test: e1, then_: e2, else_: None, pos: pos }),
   <pos:@L> "if" <e1:Exp> "then" <e2:MatchedExp> =>
      Box::new(IfExp { test: e1, then_: e2, else_: None, pos: pos }),
   <pos:@L> "if" <e1:Exp> "then" <e2:MatchedExp> "else" <e3:UnmatchedExp> =>
      Box::new(IfExp { test: e1, then_: e2, else_: Some(e3), pos: pos }),
};

LoopExp: Box<Exp> = {
   <pos:@L> "while" <e1:LoopExp> "do" <e2:LoopExp> => Box::new(WhileExp{ test: e1, body: e2, pos: pos }),
   <pos:@L> "for" <var:Ident> ":=" <lo:LoopExp> "to" <hi:LoopExp> "do" <body:LoopExp> =>
      Box::new(ForExp{var: var, escape: false, lo: lo, hi: hi, body: body, pos: pos }),
   AssignExp,
};

AssignExp: Box<Exp> = {
   <pos:@L> <var:Var> ":=" <exp:AssignExp> => Box::new(AssignExp{var: var, exp: exp, pos: pos}),
   ArrayExp,
};

ArrayExp: Box<Exp> = {
   <pos:@L> <is:IdentSubscript> "of" <init:ArrayExp> =>
   Box::new(ArrayExp { typ: is.0, size: is.1, init: init, pos: pos } ),
   MathExp,
};

Tier<Op,NextTier>: Box<Exp> = {
   <pos:@L> <left:Tier<Op,NextTier>> <op:Op> <right:NextTier> =>
      Box::new(OpExp{ left: left, right: right, op: op, pos: pos }),
   NextTier
};

MathExp = Tier<LogicOp, ArithExp>;
ArithExp = Tier<ExpOp, FactorExp>;
FactorExp = Tier<FactorOp, Term>;

ExpOp: Oper = {
   "+" => Oper::PlusOp,
   "-" => Oper::MinusOp,
};

LogicOp: Oper = {
   "=" => Oper::EqOp,
   "<>" => Oper::NeqOp,
   "<" => Oper::LtOp,
   "<=" => Oper::LeOp,
   ">" => Oper::GtOp,
   ">=" => Oper::GeOp,
};

FactorOp: Oper = {
   "*" => Oper::TimesOp,
   "/" => Oper::DivideOp,
};

Term: Box<Exp> = {
   "nil" => Box::new(NilExp),
   <pos:@L> "break" => Box::new(BreakExp(pos)),
   Integer => Box::new(IntExp(<>)),
   <pos:@L> <s:String> => Box::new(StringExp(s, pos)),

   <pos:@L> <typ:Ident> "{" <fields:Fields> "}" =>
   Box::new(RecordExp { typ: typ, fields: fields, pos: pos}),

   Var => Box::new(VarExp(<>)),
   <pos:@L> <is:IdentSubscript> => {
      let v = Box::new(SubscriptVar(Box::new(SimpleVar(is.0, pos)), is.1, pos));
      Box::new(VarExp(v))
   },

   <pos:@L> <id:Ident> "(" <a:Args> ")" => Box::new(CallExp { func: id, args: a, pos: pos }),

//   <pos:@L> "-" <e:Exp> => Box::new(OpExp {
//      left: Box::new(IntExp(0)),
//      op: Oper::MinusOp,
//      right: e,
//      pos: pos
//   }),


   "(" <exps:Exps> ")" => Box::new(SeqExp(exps)),
};

IdentSubscript: (Symbol, Box<Exp>) = {
   <typ:Ident> "[" <size:Exp> "]" => (typ, size),
};

Var: Box<Var> = {
   <pos:@L> <id:Ident> => Box::new(SimpleVar(id, pos)),
   ComplexVar,
};

ComplexVar: Box<Var> = {
   <pos:@L> <v:Var> "." <fid:Ident> => Box::new(FieldVar(v, fid, pos)),
   <pos:@L> <is:IdentSubscript> "." <fid:Ident> => {
      let v = Box::new(SubscriptVar(Box::new(SimpleVar(is.0, pos)), is.1, pos));
      Box::new(FieldVar(v, fid, pos))
   },
   <pos:@L> <is:IdentSubscript> "[" <e:Exp> "]" => {
      let v = Box::new(SubscriptVar(Box::new(SimpleVar(is.0, pos)), is.1, pos));
      Box::new(SubscriptVar(v, e, pos))
   },
   <pos:@L> <v:ComplexVar> "[" <e:Exp> "]" => Box::new(SubscriptVar(v, e, pos)),
};

Fields = Comma<Field, ",">;
Field: (Symbol, Box<Exp>, Position) = {
   <pos:@L> <id:Ident> "=" <e:Exp> => (id, e, pos),
};

